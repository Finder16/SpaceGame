from hashlib import md5
from struct import unpack, pack
from Crypto.Cipher import AES

table = ["운동하고","산책하고","책읽고","영화보고","노래부르고","춤추고","잠자고","샤워하고","세수하고","양치하고","물마시고","커피마시고","술마시고","옷입고","옷갈아입고","머리감고","머리말리고","일하고","회의하고","글쓰고","그림그리고","사진찍고","노트필기하고","쇼핑하고","여행하고","캠핑하고","수영하고","달리기하고","헬스하고","자전거타고","버스타고","지하철타고","택시타고","비행기타고","기차타고","배타고","걷고","뛰고","넘어지고","일어나고","앉고","눕고","쉬고","웃고","울고","화내고","미안하고","고맙고","감사하고","사랑하고","좋아하고","싫어하고","생각하고","계획하고","상상하고","기억하고","잊고","기다리고","만나고","헤어지고","웃으며보고","대화하고","물어보고","대답하고","들어가고","나가고","열고","닫고","줍고","버리고","꺼내고","넣고","고치고","만들고","조립하고","부수고","켜고","끄고","충전하고","다운로드하고","업로드하고","저장하고","삭제하고","검색하고","설치하고","업데이트하고","로그인하고","로그아웃하고","결제하고","주문하고","포장하고","잔소리하고","공감하고","반응하고","질문하고","확인하고","끝내고","출근하고","퇴근하고","외출하고","집에가고","모이고","흩어지고","정리하고","고르고","살고","태어나고","성장하고","배우고","졸업하고","취업하고","퇴사하고","쉬고","늘고","줄고","넘어지고","일어나고","우산쓰고","지켜보고","다가가고","멈추고","시작하고","끝나고","놀고","즐기고","참여하고","이사하고","적응하고"]

with open('output.txt') as f:
    enc = f.read().rstrip("행복하기\n")

s = 0
i = 1
ct = []
while s + i < len(enc):
    if enc[s + i] == "고":
        ct.append(enc[s:s + i + 1])
        s += i + 1
        i = 0
    i += 1

# print(len(ct))

def lcg1():
    global lcg1_state
    lcg1_state = ((lcg1_state * 5824465958561025943) + 7979475314568588667) % 8608563731122359827;
    return lcg1_state

def lcg2():
    global lcg2_state
    lcg2_state = ((lcg2_state * 5791510840215506503) + 7731928730996589209) % 8194488386109005551;
    return lcg2_state

def bf(seed):
    global lcg1_state
    global lcg2_state

    hashed = md5(bytes([seed])).digest()
    x, y = unpack('<2Q', hashed)
    
    lcg1_state = y
    lcg2_state = x

    # print(hex(lcg1_state)[2:])
    # print(hex(lcg2_state)[2:])

    for _ in range(10000):
        lcg1()
        lcg2()

    T = table.copy()
    
    for _ in range(10):
        x,y = lcg1() & 0x7F, lcg1() & 0x7F
        # print(hex(x)[2:].zfill(2), hex(y)[2:].zfill(2))
        T[x], T[y] = T[y], T[x]
    
    # print(*T)
    decoded = 0
    for i in ct:
        x = T.index(i)
        decoded <<= 7
        decoded |= x
    
    decoded = decoded.to_bytes(112, 'big')

    pt = b''
    for i in range(0, 112, 16):
        key = pack('<2Q', lcg2(), lcg2())
        # print(key.hex())
        pt += AES.new(key, AES.MODE_ECB).decrypt(decoded[i:i+16])

    return pt

'''
SEED 14
85f4780ebb85e4dd
41e3ba962e1af415
70 78
02 2e
2b 6a
5b 0b
38 24
0e 51
1a 53
2c 6a
15 7f
09 56
335eb7b861bb005309dac1e4fee03a19
e92e93dc7f25ec629d3b14004d3fe25e
2af284ddd082d5679eef62b68cb7bc5a
7554a9d27338103e516091bbc86d0558
166f4ea03036a50c2fc9daaccec9e460
7db3693a0ec5594c1109b1352688b662
d00bb2003bba8427f0ce12ad8ed0743b
'''
for i in range(256):
    ret = bf(i)
    if ret.startswith(b'hspace'):
        print(ret.strip(b'\x00').decode())
        break

# bf(0x14)