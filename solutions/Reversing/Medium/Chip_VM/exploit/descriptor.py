binary_file = open("../for_user/chip", "rb")

XOR = 1
PLUS = 2
SUB = 3
ASSIGN = 4
LSHIFT = 5
RSHIFT = 6
OR = 7
AND = 8
PRINT = 9
SCANF = 10
VERIFY = 11

def fread_func(binary):
    buf = binary.read(12)
    while buf:
        opcode = buf[0]
        operand1 = buf[1]
        operand2 = buf[2]
        const = int.from_bytes(buf[3:3+8], "little")
        rev_flag = buf[-1]
        parse_func(opcode, operand1, operand2, const, rev_flag)
        buf = binary.read(12)

def parse_func(opcode, operand1, operand2, const, rev_flag):
    if opcode == XOR:
        print("xor", end=' ')
    elif opcode == PLUS:
        print("plus ", end=' ')
    elif opcode == SUB:
        print("sub ", end=' ')
    elif opcode == ASSIGN:
        print("assign", end=' ')
    elif opcode == LSHIFT:
        print("lshift", end=' ')
    elif opcode == RSHIFT:
        print("rshift", end=' ')
    elif opcode == OR:
        print("or", end=' ')
    elif opcode == AND:
        print("and", end=' ')
    elif opcode == PRINT:
        print("print", end=' ')
    elif opcode == SCANF:
        print("scanf", end=' ')
    elif opcode == VERIFY:
        print("verify", end=' ')
    
    tmp1 = operand1 + 1
    tmp2 = operand1 + operand2 + 2

    if rev_flag == 1:
        dst = tmp1
        src = tmp2
    else:
        dst = tmp2
        src = tmp1
    
    if const == 0:
        print("d[%d], d[%d]"%(dst, src))
    else:
        print("d[%d], %x"%(dst, const))
    
    
fread_func(binary_file)