from pyeda.inter import *

a = []
for i in range(64):
    a.append(exprvar(f'a[{i}]'))

f_10 = a[31] & (~a[29] ^ ~a[31]) & (~a[28] ^ a[29]) & ~(~(~a[27] & a[25]) | ~(~a[27] & ~a[24])) & ~(~(~a[21] & a[19]) | ~a[18]) & ~(~(a[17] & ~a[16]) | ~(a[15] & ~a[12])) & (a[10] ^ ~a[9] ^ ~a[10]) & a[10] & ((~a[8] ^ a[5]) ^ ~(~a[8] | ~a[5])) & ((~a[3] ^ ~a[2]) ^ ~(~a[3] | a[2])) & (a[1] ^ a[0] ^ ~a[1]) & a[1] & (
    (~(a[30] | ~a[26] | a[23]) & ~(1 ^ ~a[20]) & (1 ^ a[22]) | ~(a[14] | ~a[13]) & ~(a[11] | ~a[7]) & (1 ^ ~a[6]) & (0 ^ ~a[4])) & (
    ~(~a[30] | a[26]) & a[23] & (a[22] ^ ~a[20]) & a[22] | ~(~a[14] | a[13] | ~a[11]) & ~(a[7] | a[6] | ~a[4])
    )
)
f_27 =((a[31] & ~a[30] & ~a[29]) ^ (a[31] & ~a[30])) & ((a[27] & a[25]) | a[24]) & ~(a[23] ^ ~a[24]) & ~(a[22] ^ a[23]) & (a[21] ^ a[24]) & ~(~(a[21] & a[20]) | ~(a[19] & ~a[16])) & (a[14] ^ ~a[10]) & a[14] & (a[8] ^ a[9] | a[8]) & ~(~(a[5] & ~a[4]) | a[8]) & ((a[3] & a[2]) ^ (a[1] | a[0])) & a[3] & a[2] & (
    (~(a[28] | a[26]) & ~(a[18] | ~a[17]) & (a[15] ^ 1) | ~(a[13] | a[12] | ~a[11]) & (a[7] ^ ~a[6]) & a[7]) & (
        ~(~a[28] | ~(a[26] & ~(~a[18] | a[17]))) & (a[15] ^ 0) | ~(~a[13] | ~a[12] | a[11]) & ((~a[6] ^ a[7]) ^ (a[6] & a[7]))
    )
)

f_34 = ((a[29] ^ a[27]) ^ ~(a[29] | ~a[27])) & ~(a[26] ^ 1) & ~((~a[25] | a[24]) | ~(a[23] & ~a[22])) & (a[21] ^ (a[20] | a[19])) & ~(~a[20] | a[19]) & (a[17] ^ a[16]) & (a[18] ^ ~a[17]) & ~(~(a[15] & ~a[16]) | ~(a[15] & ~a[14])) & (~(a[12] | ~a[11]) ^ (~a[10] | a[9])) & ~(a[12] | ~a[11]) & (a[3] ^ a[8]) & ~(~(a[3] & a[1]) | a[0]) & (
    (~((~a[31] ^ 0) | a[30] | ~a[28]) & a[13] & a[7] | ~((a[7] | a[6]) | ~(~a[5] & ~a[4])) & a[2]) & (
        ~(a[31] | ~a[30]) & ~(a[28] | a[13]) | ~(~(a[6] & a[5]) | ~(a[4] & ~a[2]))
    )
)

f_56 = (((a[31] ^ a[30]) & ~a[29]) ^ (~a[31] & a[30] & ~a[29])) & ((a[28] ^ a[27]) ^ ~(a[28] | ~a[27])) & (a[26] ^ ~a[25] ^ ~a[26]) & a[26] & ((~a[24] & a[23]) | a[20]) & (a[17] ^ a[20]) & a[17] & ((~a[16] & a[13] & ~a[12]) ^ (~a[16] & a[13])) & ~(~(a[11] & ~a[8]) | (a[8] | a[5])) & (~(~a[3] | ~a[2]) ^ (~a[1] | a[0])) & a[3] & a[2] & (
    (~(~a[22] | a[21] | a[19]) & ~((a[18] ^ 0) | ~a[15] | ~a[14]) | ~(a[10] ^ 1) & ~((a[9] ^ 0) | (~a[7] ^ 1)) & ~((1 ^ a[6]) | a[4])) & (
        ~((a[22] | ~a[21]) | ~(a[19] & a[18])) & (~a[15] ^ a[14]) & ~a[15] | ((~a[10] & a[9]) | ~a[7]) & ~(~a[7] | a[6] | ~a[4])
    )
)
fx = f_10 | f_27 | f_34 | f_56
def find_satisfying_assignments(expr):
    # 솔루션 리스트 초기화
    solutions = []
    # pyeda의 만족도구 사용
    sat = expr.satisfy_all()
    for solution in sat:
        values = []
        for i in range(32):
            values.append(solution[a[i]])
        solutions.append(values)
    return solutions

def bin_to_char(lists):
    answer = []
    for bin_list in lists:
        num = 0
        for i in range(len(bin_list)):
            num |= bin_list[i] << (31 - i)
        answer.append(int.to_bytes(num, 4, byteorder='big'))
    return answer

answer = find_satisfying_assignments(fx)
flag = bin_to_char(answer)
index = [4, 3, 0, 2, 5, 7, 6, 1]

for i in index:
    print(flag[i].decode(), end='')
print()