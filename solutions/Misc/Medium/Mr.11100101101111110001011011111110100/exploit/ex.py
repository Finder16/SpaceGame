import hashlib
import struct
from pwn import *

# Define the commands
COMMANDS = {
    'forward': 10,
    'backward': 20,
    'left': 30,
    'right': 40
}

#COMMAND = ['right', 'right', 'right', 'right', 'right', 'right', 'right', 'backward', 'backward', 'backward', 'backward', 'backward', 'backward', 'backward']

COMMAND = ['right', 'right', 'right', 'right', 'right', 'right', 'right', 'backward', 'backward', 'backward', 'backward', 'backward', 'backward']

for _ in range(0, 121):
    COMMAND.append('left')
    COMMAND.append('right')
COMMAND.append('backward')
COMMAND.append('backward')

#COMMAND = ['right']
#COMMAND = ['right', 'backward', 'left', 'forward']
# Function to generate a unique hash value for the robot

def to_hex_byte(value):
    byte_value = struct.pack(">I", value)[-1:]
    hex_value = byte_value.hex()
    return hex_value

def generate_robot_id(identifier: str) -> str:
    return hashlib.sha256(identifier.encode()).hexdigest()[:8]

def md5_hash(command, counter, robot_id):
    pkt = str(command) + str(counter) + robot_id
    print("counter :", counter)
    print("pkt :", pkt)
    print("pkt_hex:", bytes.fromhex(pkt.ljust(16, '0')))
    hash = hashlib.md5(pkt.encode('utf-8')).digest()
    print("hash :", hash)
    return bytes.fromhex(pkt)+hash

# Function to create the wireless signal
def create_wireless_signal(command: str, counter: str, robot_id: str, ):
    if command not in COMMANDS:
        raise ValueError(f"Invalid command: {command}")
    
    command_code = COMMANDS[command]
    signal_format = '>B B 8s'  # Big-endian, 1 byte command, 4 bytes counter
    robot_id_bytes = bytes.fromhex(robot_id)
    signal = md5_hash(command_code, counter, robot_id)
    return signal

# Manchester encoding function
def manchester_encode(data: bytes) -> bytes:
    encoded = []
    for byte in data:
        for bit in range(8):
            if byte & (1 << (7 - bit)):
                encoded.extend([0b0, 0b1])  # '01'
            else:
                encoded.extend([0b1, 0b0])  # '10'
    encoded_bytes = bytearray()
    for i in range(0, len(encoded), 8):
        byte = 0
        for bit in encoded[i:i+8]:
            byte = (byte << 1) | bit
        encoded_bytes.append(byte)
    return bytes(encoded_bytes)

# Example usage
if __name__ == "__main__":
    p = remote('localhost', 4997)
    context.log_level='debug'
    robot_identifier = "Robot123"
    robot_id = generate_robot_id(robot_identifier)
    counter = 1
    #for _ in range(0, 14):
    #for command in COMMANDS:
    for command in COMMAND:
        signal = create_wireless_signal(command, to_hex_byte(counter), robot_id)
        print("signal : ", signal)
        encoded_signal = manchester_encode(signal)
        
        # Print the encoded signal
        #print(f"Encoded Signal {command} (as binary string): {''.join(format(byte, '08b') for byte in encoded_signal)}")       
        #print(''.join(format(byte, '08b') for byte in encoded_signal))
        p.sendlineafter("Enter the encoded signal as a binary string: ", ''.join(format(byte, '08b') for byte in encoded_signal))
        print("[*] COUNTER : ", counter)
        counter += 1
        counter = counter % 256


    p.interactive()

